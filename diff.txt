diff --git a/README.md b/README.md
index 74840bc..b777911 100644
--- a/README.md
+++ b/README.md
@@ -20,8 +20,11 @@
 	- setScale()相机拉伸
 
 # 待办: 
+- 设计材质绘制
 
 # 更新
+
+
 ## 0.1.7-alpha: 代码优化与调整
 - **GLGameView.java**：
 	- 新增 `coordSign` 变量，表示坐标系统符号。
diff --git a/app/build.gradle b/app/build.gradle
index 3fc30de..2afb41f 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -37,8 +37,8 @@ android {
 
 dependencies {
 	compile fileTree(dir: 'libs', include: ['*.jar'])
-	compile ('com.github.AIDEProjects:AppDevFramework:0.6.8-alpha')
-	//compile project(':storage/emulated/0/AppProjects/Libs/AppDevFramework/app')
+	//compile ('com.github.AIDEProjects:AppDevFramework:0.6.8-alpha')
+	compile project(':storage/emulated/0/AppProjects/Libs/AppDevFramework/app')
 	
 	// kotlin库如果类冲突，取消下一行注释
 	// api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.0.0"
diff --git a/app/src/main/java/com/goldsprite/gamedevframework/GLGameView.java b/app/src/main/java/com/goldsprite/gamedevframework/GLGameView.java
deleted file mode 100644
index 582bb94..0000000
--- a/app/src/main/java/com/goldsprite/gamedevframework/GLGameView.java
+++ /dev/null
@@ -1,159 +0,0 @@
-package com.goldsprite.gamedevframework;
-
-import android.content.*;
-import android.opengl.*;
-import android.view.*;
-import com.goldsprite.appdevframework.math.*;
-import javax.microedition.khronos.egl.*;
-import javax.microedition.khronos.opengles.*;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import android.util.*;
-import com.goldsprite.appdevframework.log.Log;
-import com.goldsprite.appdevframework.log.*;
-import com.goldsprite.appdevframework.apputils.GestureHandler;
-
-public class GLGameView extends GLSurfaceView {
-
-	public enum TAG {
-		LifeCycle
-		}
-	static {
-		Log.showTags.put(GLGameView.TAG.LifeCycle, Log.LogMode.encodeMode(true, true));
-	}
-
-	public static class CFG {
-		public boolean enableViewportGesture = false;
-	}
-	private CFG cfg;
-	public CFG Cfg() { return cfg; }
-
-	private GestureHandler gestureHandler;
-	public GestureHandler GestureHandler() { return gestureHandler; }
-
-	private GestureHandler.GestureListener listener;
-	public GestureHandler.GestureListener GestureListener() { return listener; }
-
-	private Vector2Int 
-	stageSize = new Vector2Int(), 
-	viewportSize = new Vector2Int(), 
-	coordSign = new Vector2Int();
-
-	private GLRenderer renderer;
-	public GLRenderer Renderer() { return renderer; }
-
-	public void create() {}
-	public void render() {}
-
-
-	public GLGameView(Context ctx, CFG cfg) {
-		super(ctx);
-		init(ctx, cfg);
-	}
-
-	private void init(Context ctx, CFG cfg) {
-		setEGLContextClientVersion(2);
-
-		if (cfg == null) {
-			cfg = new CFG();
-		}
-		this.cfg = cfg;
-
-		// 初始化渲染器
-		renderer = new GLRenderer();
-		setRenderer(renderer);
-
-		Runnable initRun = new Runnable(){
-			public void run() {
-				String str = "GLGameView视图已准备";
-				Log.logT(TAG.LifeCycle, str);
-			}
-		};
-		post(initRun);
-
-		listener = new GestureHandler.GestureListener(){
-			public boolean hasView() {
-				return true;
-			}
-			public Vector2Int getStageSize() {
-				View child0 = GLGameView.this;
-				stageSize.set(child0.getWidth(), child0.getHeight());
-				return stageSize;
-			}
-			public Vector2Int getViewportSize() {
-				viewportSize.set(getWidth(), getHeight());
-				return viewportSize;
-			}
-			public Vector2Int coordinatesSigned(){
-				coordSign.set(1, 1);
-				return coordSign;
-			}
-			
-			public void onDoublePointerMove(float x, float y) {
-				renderer.Camera().translation(x, y);
-			}
-			public void onScale(float setScale) {
-				renderer.Camera().setScale(setScale);
-			}
-		};
-		final GestureHandler.CFG gestureCfg = new GestureHandler.CFG();
-		gestureCfg.allSet(cfg.enableViewportGesture);
-		gestureHandler = new GestureHandler(listener, gestureCfg);
-	}
-
-	@Override
-	public boolean onTouchEvent(MotionEvent event) {
-		return gestureHandler.handleTouchEvent(event);
-	}
-
-
-	public class GLRenderer implements GLSurfaceView.Renderer {
-		private boolean initialized;
-
-		private OrthoCamera camera;
-		public OrthoCamera Camera() { return camera; }
-
-
-		public void init() {
-			camera = new OrthoCamera(getWidth(), getHeight());
-			create();
-			initialized = true;
-			Log.logT(TAG.LifeCycle, "游戏视图GLRenderer渲染器已完成初始化initialized");
-		}
-
-		@Override
-		public void onSurfaceCreated(GL10 gl, EGLConfig config) {
-			GLES20.glClearColor(0.3f, 0.3f, 0.3f, 1f);
-			Log.logT(TAG.LifeCycle, "onSurfaceCreated视图已创建");
-			init();
-		}
-
-		@Override
-		public void onDrawFrame(GL10 gl) {
-			// 清空屏幕
-			GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
-
-			if (!initialized) return;
-
-			//Log.logT(TAG.LifeCycle, "onDrawFrame帧绘制循环");
-
-			// 摄像机位移与缩放实现
-			camera.updateMatrix();
-
-			render();
-		}
-
-		@Override
-		public void onSurfaceChanged(GL10 gl, int width, int height) {
-			GLES20.glViewport(0, 0, width, height);
-
-			Log.logT(TAG.LifeCycle, "onSurfaceChanged布局视口更新: vpWidth: %s, vpHeight: %s", width, height);
-
-			if (!initialized) return;
-
-			camera.updateViewport(width, height);
-		}
-
-	}
-
-}
diff --git a/app/src/main/java/com/goldsprite/gamedevframework/OrthoCamera.java b/app/src/main/java/com/goldsprite/gamedevframework/OrthoCamera.java
index 0179d16..d59ff71 100644
--- a/app/src/main/java/com/goldsprite/gamedevframework/OrthoCamera.java
+++ b/app/src/main/java/com/goldsprite/gamedevframework/OrthoCamera.java
@@ -2,6 +2,7 @@ package com.goldsprite.gamedevframework;
 import android.opengl.*;
 import com.goldsprite.appdevframework.math.*;
 import com.goldsprite.appdevframework.log.*;
+import com.goldsprite.gamedevframework.app.*;
 
 public class OrthoCamera
 {
diff --git a/app/src/main/java/com/goldsprite/gamedevframework/ShapeBatch.java b/app/src/main/java/com/goldsprite/gamedevframework/ShapeBatch.java
index 91739b5..f981480 100644
--- a/app/src/main/java/com/goldsprite/gamedevframework/ShapeBatch.java
+++ b/app/src/main/java/com/goldsprite/gamedevframework/ShapeBatch.java
@@ -4,6 +4,7 @@ import android.opengl.*;
 import java.nio.*;
 import com.goldsprite.appdevframework.math.*;
 import com.goldsprite.appdevframework.log.*;
+import com.goldsprite.gamedevframework.app.*;
 
 public class ShapeBatch
 {
diff --git a/app/src/main/java/com/goldsprite/gamedevframework/ShapeGroup.java b/app/src/main/java/com/goldsprite/gamedevframework/ShapeGroup.java
index 68f2c8e..4bd9dc7 100644
--- a/app/src/main/java/com/goldsprite/gamedevframework/ShapeGroup.java
+++ b/app/src/main/java/com/goldsprite/gamedevframework/ShapeGroup.java
@@ -9,6 +9,11 @@ public class ShapeGroup {
 	private float scale;
 	public float circleSize = 1f * 20;
 
+	private static StrokeCircle circle = new StrokeCircle();
+	private static StrokeRectangle rectangle = new StrokeRectangle();
+	private static Line line = new Line();
+	
+
 	// 构造函数
 	public ShapeGroup(float centerX, float centerY, float width, float height, float circleSize, float scale) {
 		this.centerX = centerX;
@@ -41,7 +46,7 @@ public class ShapeGroup {
 		// 绘制矩形
 		rectangle.draw(vpMatrix, centerX, centerY, scale * width, scale * height, lineWidth, rectColor);
 	}*/
-	public void draw(float[] vpMatrix, StrokeCircle circle, StrokeRectangle rectangle, float lineWidth, 
+	public void draw(float[] vpMatrix, float lineWidth, 
 					 float[] circleColor, float[] rectColor, boolean circleFixedSize) {
 		// 绘制矩形，应用缩放
 		float rectScale = scale;
@@ -54,7 +59,7 @@ public class ShapeGroup {
 	
 
 	// 静态方法：连接两组图形中心的线段
-	public static void connectCenters(float[] vpMatrix, Line line, ShapeGroup group1, ShapeGroup group2, float lineWidth, float[] color) {
+	public static void connectCenters(float[] vpMatrix, ShapeGroup group1, ShapeGroup group2, float lineWidth, float[] color) {
 		line.draw(vpMatrix, group1.centerX, group1.centerY, group2.centerX, group2.centerY, lineWidth, color);
 	}
 	
